/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  PriceConsumer,
  PriceConsumerInterface,
} from "../../contracts/PriceConsumer";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "_owner",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "_feedsChanged",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address[]",
        name: "_tokens",
        type: "address[]",
      },
      {
        indexed: false,
        internalType: "address[]",
        name: "_feeds",
        type: "address[]",
      },
    ],
    name: "SetFeeds",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_user",
        type: "address",
      },
      {
        internalType: "address",
        name: "_token",
        type: "address",
      },
    ],
    name: "getBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_user",
        type: "address",
      },
      {
        internalType: "address[]",
        name: "_tokens",
        type: "address[]",
      },
    ],
    name: "getBalances",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_user",
        type: "address",
      },
    ],
    name: "getNativeBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_token",
        type: "address",
      },
    ],
    name: "getPrice",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "_tokens",
        type: "address[]",
      },
    ],
    name: "getPrices",
    outputs: [
      {
        internalType: "int256[]",
        name: "",
        type: "int256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "_tokens",
        type: "address[]",
      },
      {
        internalType: "address[]",
        name: "_feeds",
        type: "address[]",
      },
    ],
    name: "setFeeds",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061002d61002261003260201b60201c565b61003a60201b60201c565b6100fe565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6114798061010d6000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c80638fb5a482116100665780638fb5a48214610120578063d4fac45d14610150578063efd8be6214610180578063f2fde38b146101b0578063f7af4ab4146101cc57610093565b806341976e09146100985780636a385ae9146100c8578063715018a6146100f85780638da5cb5b14610102575b600080fd5b6100b260048036038101906100ad9190610a60565b6101e8565b6040516100bf9190610aa6565b60405180910390f35b6100e260048036038101906100dd9190610b26565b610396565b6040516100ef9190610c4e565b60405180910390f35b61010061045f565b005b61010a610473565b6040516101179190610c7f565b60405180910390f35b61013a60048036038101906101359190610c9a565b61049c565b6040516101479190610da5565b60405180910390f35b61016a60048036038101906101659190610dc7565b610563565b6040516101779190610e16565b60405180910390f35b61019a60048036038101906101959190610a60565b6105e7565b6040516101a79190610e16565b60405180910390f35b6101ca60048036038101906101c59190610a60565b610608565b005b6101e660048036038101906101e19190610e31565b61068b565b005b60008073ffffffffffffffffffffffffffffffffffffffff16600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036102b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ae90610f35565b60405180910390fd5b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610363573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103879190610fef565b50505091505080915050919050565b606060008383905067ffffffffffffffff8111156103b7576103b661106a565b5b6040519080825280602002602001820160405280156103e55781602001602082028036833780820191505090505b50905060005b84849050811015610453576104278686868481811061040d5761040c611099565b5b90506020020160208101906104229190610a60565b610563565b82828151811061043a57610439611099565b5b60200260200101818152505080806001019150506103eb565b50809150509392505050565b6104676108ae565b610471600061092c565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060008383905067ffffffffffffffff8111156104bd576104bc61106a565b5b6040519080825280602002602001820160405280156104eb5781602001602082028036833780820191505090505b50905060005b848490508110156105585761052c85858381811061051257610511611099565b5b90506020020160208101906105279190610a60565b6101e8565b82828151811061053f5761053e611099565b5b60200260200101818152505080806001019150506104f1565b508091505092915050565b60008173ffffffffffffffffffffffffffffffffffffffff166370a08231846040518263ffffffff1660e01b815260040161059e9190610c7f565b602060405180830381865afa1580156105bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105df91906110c8565b905092915050565b60008173ffffffffffffffffffffffffffffffffffffffff16319050919050565b6106106108ae565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361067f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067690611167565b60405180910390fd5b6106888161092c565b50565b6106936108ae565b600084849050116106d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d0906111d3565b60405180910390fd5b6000828290501161071f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107169061123f565b60405180910390fd5b818190508484905014610767576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161075e906112ab565b60405180910390fd5b60005b8484905081101561084e5782828281811061078857610787611099565b5b905060200201602081019061079d9190610a60565b600160008787858181106107b4576107b3611099565b5b90506020020160208101906107c99190610a60565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808060010191505061076a565b503373ffffffffffffffffffffffffffffffffffffffff167f222702c842eaa711c4979612b39c3b28266b11eea6dcf3fda168ee9d9465463c85859050868686866040516108a095949392919061138e565b60405180910390a250505050565b6108b66109f0565b73ffffffffffffffffffffffffffffffffffffffff166108d4610473565b73ffffffffffffffffffffffffffffffffffffffff161461092a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161092190611423565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a2d82610a02565b9050919050565b610a3d81610a22565b8114610a4857600080fd5b50565b600081359050610a5a81610a34565b92915050565b600060208284031215610a7657610a756109f8565b5b6000610a8484828501610a4b565b91505092915050565b6000819050919050565b610aa081610a8d565b82525050565b6000602082019050610abb6000830184610a97565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112610ae657610ae5610ac1565b5b8235905067ffffffffffffffff811115610b0357610b02610ac6565b5b602083019150836020820283011115610b1f57610b1e610acb565b5b9250929050565b600080600060408486031215610b3f57610b3e6109f8565b5b6000610b4d86828701610a4b565b935050602084013567ffffffffffffffff811115610b6e57610b6d6109fd565b5b610b7a86828701610ad0565b92509250509250925092565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000819050919050565b610bc581610bb2565b82525050565b6000610bd78383610bbc565b60208301905092915050565b6000602082019050919050565b6000610bfb82610b86565b610c058185610b91565b9350610c1083610ba2565b8060005b83811015610c41578151610c288882610bcb565b9750610c3383610be3565b925050600181019050610c14565b5085935050505092915050565b60006020820190508181036000830152610c688184610bf0565b905092915050565b610c7981610a22565b82525050565b6000602082019050610c946000830184610c70565b92915050565b60008060208385031215610cb157610cb06109f8565b5b600083013567ffffffffffffffff811115610ccf57610cce6109fd565b5b610cdb85828601610ad0565b92509250509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b610d1c81610a8d565b82525050565b6000610d2e8383610d13565b60208301905092915050565b6000602082019050919050565b6000610d5282610ce7565b610d5c8185610cf2565b9350610d6783610d03565b8060005b83811015610d98578151610d7f8882610d22565b9750610d8a83610d3a565b925050600181019050610d6b565b5085935050505092915050565b60006020820190508181036000830152610dbf8184610d47565b905092915050565b60008060408385031215610dde57610ddd6109f8565b5b6000610dec85828601610a4b565b9250506020610dfd85828601610a4b565b9150509250929050565b610e1081610bb2565b82525050565b6000602082019050610e2b6000830184610e07565b92915050565b60008060008060408587031215610e4b57610e4a6109f8565b5b600085013567ffffffffffffffff811115610e6957610e686109fd565b5b610e7587828801610ad0565b9450945050602085013567ffffffffffffffff811115610e9857610e976109fd565b5b610ea487828801610ad0565b925092505092959194509250565b600082825260208201905092915050565b7f4665656420646f6573206e6f7420657869737420666f72207468697320746f6b60008201527f656e000000000000000000000000000000000000000000000000000000000000602082015250565b6000610f1f602283610eb2565b9150610f2a82610ec3565b604082019050919050565b60006020820190508181036000830152610f4e81610f12565b9050919050565b600069ffffffffffffffffffff82169050919050565b610f7481610f55565b8114610f7f57600080fd5b50565b600081519050610f9181610f6b565b92915050565b610fa081610a8d565b8114610fab57600080fd5b50565b600081519050610fbd81610f97565b92915050565b610fcc81610bb2565b8114610fd757600080fd5b50565b600081519050610fe981610fc3565b92915050565b600080600080600060a0868803121561100b5761100a6109f8565b5b600061101988828901610f82565b955050602061102a88828901610fae565b945050604061103b88828901610fda565b935050606061104c88828901610fda565b925050608061105d88828901610f82565b9150509295509295909350565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000602082840312156110de576110dd6109f8565b5b60006110ec84828501610fda565b91505092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611151602683610eb2565b915061115c826110f5565b604082019050919050565b6000602082019050818103600083015261118081611144565b9050919050565b7f546f6b656e73206172726179206c656e677468206973207a65726f0000000000600082015250565b60006111bd601b83610eb2565b91506111c882611187565b602082019050919050565b600060208201905081810360008301526111ec816111b0565b9050919050565b7f4665656473206172726179206c656e677468206973207a65726f000000000000600082015250565b6000611229601a83610eb2565b9150611234826111f3565b602082019050919050565b600060208201905081810360008301526112588161121c565b9050919050565b7f417272617973206c656e677468206d69736d6174636800000000000000000000600082015250565b6000611295601683610eb2565b91506112a08261125f565b602082019050919050565b600060208201905081810360008301526112c481611288565b9050919050565b600082825260208201905092915050565b6000819050919050565b6112ef81610a22565b82525050565b600061130183836112e6565b60208301905092915050565b600061131c6020840184610a4b565b905092915050565b6000602082019050919050565b600061133d83856112cb565b9350611348826112dc565b8060005b858110156113815761135e828461130d565b61136888826112f5565b975061137383611324565b92505060018101905061134c565b5085925050509392505050565b60006060820190506113a36000830188610e07565b81810360208301526113b6818688611331565b905081810360408301526113cb818486611331565b90509695505050505050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061140d602083610eb2565b9150611418826113d7565b602082019050919050565b6000602082019050818103600083015261143c81611400565b905091905056fea26469706673582212200d98355bd9be2108f0cd505faf4bbaf532568c49ff3e51ac2d3dcff5e66cd48064736f6c63430008110033";

type PriceConsumerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PriceConsumerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class PriceConsumer__factory extends ContractFactory {
  constructor(...args: PriceConsumerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<PriceConsumer> {
    return super.deploy(overrides || {}) as Promise<PriceConsumer>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): PriceConsumer {
    return super.attach(address) as PriceConsumer;
  }
  override connect(signer: Signer): PriceConsumer__factory {
    return super.connect(signer) as PriceConsumer__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PriceConsumerInterface {
    return new utils.Interface(_abi) as PriceConsumerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): PriceConsumer {
    return new Contract(address, _abi, signerOrProvider) as PriceConsumer;
  }
}
