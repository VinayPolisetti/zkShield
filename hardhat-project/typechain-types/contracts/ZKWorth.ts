/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace ZKWorth {
  export type UserStruct = {
    publicKey: PromiseOrValue<BigNumberish>;
    primaryWalletAddress: PromiseOrValue<string>;
    secondaryWalletAddresses: PromiseOrValue<string>[];
    incomingRequests: PromiseOrValue<string>[];
    outgoingRequests: PromiseOrValue<string>[];
  };

  export type UserStructOutput = [
    BigNumber,
    string,
    string[],
    string[],
    string[]
  ] & {
    publicKey: BigNumber;
    primaryWalletAddress: string;
    secondaryWalletAddresses: string[];
    incomingRequests: string[];
    outgoingRequests: string[];
  };

  export type RequestMetadataStruct = {
    sender: PromiseOrValue<string>;
    receiver: PromiseOrValue<string>;
    threshold: PromiseOrValue<BigNumberish>;
    status: PromiseOrValue<BigNumberish>;
    result: PromiseOrValue<boolean>;
    proof: PromiseOrValue<string>;
  };

  export type RequestMetadataStructOutput = [
    string,
    string,
    BigNumber,
    number,
    boolean,
    string
  ] & {
    sender: string;
    receiver: string;
    threshold: BigNumber;
    status: number;
    result: boolean;
    proof: string;
  };
}

export interface ZKWorthInterface extends utils.Interface {
  functions: {
    "getAccount(string)": FunctionFragment;
    "getIncomingRequests(string)": FunctionFragment;
    "getLatestId()": FunctionFragment;
    "getOutgoingRequests(string)": FunctionFragment;
    "getPrimaryWalletAddress(string)": FunctionFragment;
    "getPublicKey(string)": FunctionFragment;
    "getRequestMetadata(uint256)": FunctionFragment;
    "getRequestMetadatas(uint256[])": FunctionFragment;
    "getRequests(string)": FunctionFragment;
    "getSecondaryWalletAddresses(string)": FunctionFragment;
    "isUniquePublicKey(string)": FunctionFragment;
    "isUniqueUsername(string)": FunctionFragment;
    "owner()": FunctionFragment;
    "removeSecondaryWalletAddress(string,string)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setAccount(string,string,string)": FunctionFragment;
    "setRequestMetadata(uint256,string,string,uint256,int8,bool,string)": FunctionFragment;
    "setRequests(string,string,string,string)": FunctionFragment;
    "setSecondaryWalletAddress(string,string)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getAccount"
      | "getIncomingRequests"
      | "getLatestId"
      | "getOutgoingRequests"
      | "getPrimaryWalletAddress"
      | "getPublicKey"
      | "getRequestMetadata"
      | "getRequestMetadatas"
      | "getRequests"
      | "getSecondaryWalletAddresses"
      | "isUniquePublicKey"
      | "isUniqueUsername"
      | "owner"
      | "removeSecondaryWalletAddress"
      | "renounceOwnership"
      | "setAccount"
      | "setRequestMetadata"
      | "setRequests"
      | "setSecondaryWalletAddress"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getAccount",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getIncomingRequests",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getLatestId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOutgoingRequests",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPrimaryWalletAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPublicKey",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRequestMetadata",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRequestMetadatas",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getRequests",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSecondaryWalletAddresses",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isUniquePublicKey",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isUniqueUsername",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeSecondaryWalletAddress",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAccount",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setRequestMetadata",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setRequests",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setSecondaryWalletAddress",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "getAccount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getIncomingRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLatestId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOutgoingRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPrimaryWalletAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPublicKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRequestMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRequestMetadatas",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSecondaryWalletAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isUniquePublicKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isUniqueUsername",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeSecondaryWalletAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAccount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setRequestMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSecondaryWalletAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface ZKWorth extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ZKWorthInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getAccount(
      _username: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[ZKWorth.UserStructOutput]>;

    getIncomingRequests(
      _username: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getLatestId(overrides?: CallOverrides): Promise<[BigNumber]>;

    getOutgoingRequests(
      _username: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getPrimaryWalletAddress(
      _username: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getPublicKey(
      _username: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRequestMetadata(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[ZKWorth.RequestMetadataStructOutput]>;

    getRequestMetadatas(
      _ids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[ZKWorth.RequestMetadataStructOutput[]]>;

    getRequests(
      _username: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[[string[], string[]]]>;

    getSecondaryWalletAddresses(
      _username: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    isUniquePublicKey(
      _publicKey: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isUniqueUsername(
      _username: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    removeSecondaryWalletAddress(
      _username: PromiseOrValue<string>,
      _secondaryWalletAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAccount(
      _username: PromiseOrValue<string>,
      _publicKey: PromiseOrValue<string>,
      _primaryWalletAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRequestMetadata(
      _id: PromiseOrValue<BigNumberish>,
      _sender: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      _threshold: PromiseOrValue<BigNumberish>,
      _status: PromiseOrValue<BigNumberish>,
      _result: PromiseOrValue<boolean>,
      _proof: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRequests(
      _sender: PromiseOrValue<string>,
      _senderId: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      _receiverId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSecondaryWalletAddress(
      _username: PromiseOrValue<string>,
      _secondaryWalletAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  getAccount(
    _username: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<ZKWorth.UserStructOutput>;

  getIncomingRequests(
    _username: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getLatestId(overrides?: CallOverrides): Promise<BigNumber>;

  getOutgoingRequests(
    _username: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getPrimaryWalletAddress(
    _username: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getPublicKey(
    _username: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getRequestMetadata(
    _id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<ZKWorth.RequestMetadataStructOutput>;

  getRequestMetadatas(
    _ids: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<ZKWorth.RequestMetadataStructOutput[]>;

  getRequests(
    _username: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[string[], string[]]>;

  getSecondaryWalletAddresses(
    _username: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  isUniquePublicKey(
    _publicKey: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isUniqueUsername(
    _username: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  removeSecondaryWalletAddress(
    _username: PromiseOrValue<string>,
    _secondaryWalletAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAccount(
    _username: PromiseOrValue<string>,
    _publicKey: PromiseOrValue<string>,
    _primaryWalletAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRequestMetadata(
    _id: PromiseOrValue<BigNumberish>,
    _sender: PromiseOrValue<string>,
    _receiver: PromiseOrValue<string>,
    _threshold: PromiseOrValue<BigNumberish>,
    _status: PromiseOrValue<BigNumberish>,
    _result: PromiseOrValue<boolean>,
    _proof: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRequests(
    _sender: PromiseOrValue<string>,
    _senderId: PromiseOrValue<string>,
    _receiver: PromiseOrValue<string>,
    _receiverId: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSecondaryWalletAddress(
    _username: PromiseOrValue<string>,
    _secondaryWalletAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getAccount(
      _username: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<ZKWorth.UserStructOutput>;

    getIncomingRequests(
      _username: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getLatestId(overrides?: CallOverrides): Promise<BigNumber>;

    getOutgoingRequests(
      _username: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getPrimaryWalletAddress(
      _username: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getPublicKey(
      _username: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getRequestMetadata(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<ZKWorth.RequestMetadataStructOutput>;

    getRequestMetadatas(
      _ids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<ZKWorth.RequestMetadataStructOutput[]>;

    getRequests(
      _username: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[], string[]]>;

    getSecondaryWalletAddresses(
      _username: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    isUniquePublicKey(
      _publicKey: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isUniqueUsername(
      _username: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    removeSecondaryWalletAddress(
      _username: PromiseOrValue<string>,
      _secondaryWalletAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setAccount(
      _username: PromiseOrValue<string>,
      _publicKey: PromiseOrValue<string>,
      _primaryWalletAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRequestMetadata(
      _id: PromiseOrValue<BigNumberish>,
      _sender: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      _threshold: PromiseOrValue<BigNumberish>,
      _status: PromiseOrValue<BigNumberish>,
      _result: PromiseOrValue<boolean>,
      _proof: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRequests(
      _sender: PromiseOrValue<string>,
      _senderId: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      _receiverId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSecondaryWalletAddress(
      _username: PromiseOrValue<string>,
      _secondaryWalletAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    getAccount(
      _username: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getIncomingRequests(
      _username: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLatestId(overrides?: CallOverrides): Promise<BigNumber>;

    getOutgoingRequests(
      _username: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPrimaryWalletAddress(
      _username: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPublicKey(
      _username: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRequestMetadata(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRequestMetadatas(
      _ids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRequests(
      _username: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSecondaryWalletAddresses(
      _username: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isUniquePublicKey(
      _publicKey: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isUniqueUsername(
      _username: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    removeSecondaryWalletAddress(
      _username: PromiseOrValue<string>,
      _secondaryWalletAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAccount(
      _username: PromiseOrValue<string>,
      _publicKey: PromiseOrValue<string>,
      _primaryWalletAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRequestMetadata(
      _id: PromiseOrValue<BigNumberish>,
      _sender: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      _threshold: PromiseOrValue<BigNumberish>,
      _status: PromiseOrValue<BigNumberish>,
      _result: PromiseOrValue<boolean>,
      _proof: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRequests(
      _sender: PromiseOrValue<string>,
      _senderId: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      _receiverId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSecondaryWalletAddress(
      _username: PromiseOrValue<string>,
      _secondaryWalletAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getAccount(
      _username: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getIncomingRequests(
      _username: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLatestId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOutgoingRequests(
      _username: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPrimaryWalletAddress(
      _username: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPublicKey(
      _username: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRequestMetadata(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRequestMetadatas(
      _ids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRequests(
      _username: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSecondaryWalletAddresses(
      _username: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isUniquePublicKey(
      _publicKey: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isUniqueUsername(
      _username: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeSecondaryWalletAddress(
      _username: PromiseOrValue<string>,
      _secondaryWalletAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAccount(
      _username: PromiseOrValue<string>,
      _publicKey: PromiseOrValue<string>,
      _primaryWalletAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRequestMetadata(
      _id: PromiseOrValue<BigNumberish>,
      _sender: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      _threshold: PromiseOrValue<BigNumberish>,
      _status: PromiseOrValue<BigNumberish>,
      _result: PromiseOrValue<boolean>,
      _proof: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRequests(
      _sender: PromiseOrValue<string>,
      _senderId: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      _receiverId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSecondaryWalletAddress(
      _username: PromiseOrValue<string>,
      _secondaryWalletAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
